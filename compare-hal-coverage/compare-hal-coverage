#!/usr/bin/env Rscript
if (!require("pacman")) install.packages("pacman", repos = "https://cloud.r-project.org/")
pacman::p_load(argparse, ggplot2, dplyr)

# Parse arguments.
parser <- ArgumentParser(description = 'Plot a comparison between multiple coverage files produced by halStats --coverage')
parser$add_argument('--output', help = 'Output PDF file', default = 'coverage.pdf')
parser$add_argument('--labels', nargs = '+', help = 'Labels for each input file')
parser$add_argument('coverage', nargs = '+', help = 'Coverage files')
parser$add_argument('--cladeMap', help = 'Clade map file describing how to group the genomes')
parser$add_argument('--bar', action = 'store_true', default = F, help = 'Create a faceted bar graph instead of line graph')
parser$add_argument('--scatterplot', action = 'store_true', default = F, help = 'Create a faceted scatterplot instead of line graph')
parser$add_argument('--differential', action = 'store_true', default = F, help = 'Plot the differential, with respect to the first coverage file, of the other coverage files')
args <- parser$parse_args()

# Parse the coverage files.
coverage_dfs <- sapply(args$coverage, function(x) { read.csv(x, header=T) }, simplify=F)
coverage_df <- bind_rows(coverage_dfs, .id = "Alignment")

ref_genome <- coverage_df$Genome[1]
ref_genome_len <- coverage_df$"sitesCovered1Times"[1]
coverage_df$PercentCoverage <- coverage_df$"sitesCovered1Times" / ref_genome_len * 100

# Apply the labels, if any
if (!is.null(args$labels)) {
    file_to_label <- data.frame(filename=args$coverage, label=args$labels)
    matching_rows <- match(coverage_df$Alignment, file_to_label$filename)
    coverage_df$Alignment <- file_to_label[matching_rows, ]$label
}

# Apply the clade grouping, if any
if (!is.null(args$cladeMap)) {
    cladeMap <- read.table(args$cladeMap, sep="\t", header=T)
    coverage_df <- left_join(coverage_df, cladeMap, by = "Genome")
}
p <- ggplot(coverage_df, aes(x=Alignment, y=PercentCoverage))
p <- p + theme_classic()
if (args$bar) {
    p <- p + facet_wrap( ~ Genome)
    p <- p + geom_bar(position="dodge", stat="identity")
    p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
    p <- p + scale_x_discrete(limits=unique(coverage_df$Alignment))
    p <- p + ylab(paste("Percent coverage on", ref_genome))
} else if (args$scatterplot) {
    p <- p + facet_wrap( ~ Genome, scales="free_y")
    p <- p + geom_point()
    p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
    p <- p + scale_x_discrete(limits=unique(coverage_df$Alignment))
    p <- p + ylab(paste("Percent coverage on", ref_genome))
} else if (args$differential) {
    first_alignment_name <- args$label[[1]]
    first_alignment_coverage <- coverage_df %>% group_by(Genome) %>% subset(Alignment == first_alignment_name) %>% summarize(firstAlignmentPercentCoverage=first(PercentCoverage))
    coverage_df <- left_join(coverage_df, first_alignment_coverage, by="Genome")
    coverage_df <- subset(coverage_df, Alignment != first_alignment_name & Genome != ref_genome)
    coverage_df$DifferentialPercentCoverage <- coverage_df$PercentCoverage - coverage_df$firstAlignmentPercentCoverage
    p <- ggplot(coverage_df, aes(x=Genome, y=DifferentialPercentCoverage, fill=Alignment)) + theme_classic()
    p <- p + geom_bar(position="dodge", stat="identity", width=rel(0.5))
    p <- p + scale_fill_brewer(type="qual", palette="Dark2")
    p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
    p <- p + ylab(paste("Difference in percent coverage relative to", first_alignment_name))
    p <- p + ggtitle(paste("Differential coverage on genome", ref_genome))
} else {
    if (!is.null(args$cladeMap)) {
        p <- p + geom_line(aes(color=Clade, group=Genome))
    } else {
        p <- p + geom_line(aes(group=Genome))
    }
    p <- p + scale_x_discrete(limits=unique(coverage_df$Alignment))
    p <- p + ylab(paste("Percent coverage on", ref_genome))
}
ggsave(args$output, p)

